import React, { useEffect, useMemo, useRef, useState } from "react";

// Quran.com API notes (no key required):
// - Chapters: https://api.quran.com/api/v4/chapters?language=en
// - Verses by chapter: https://api.quran.com/api/v4/verses/by_chapter/{chapter_id}?language=en&translations=20&fields=text_uthmani&per_page=50&page=1
//   Common translation resource_id values: 20 = Sahih International, 131 = Dr. Mustafa Khattab, 19 = Pickthall, 22 = Yusuf Ali
// If you see CORS issues in some environments, run a simple local dev server (Vite/Next) or use a lightweight proxy.

const TRANSLATION_PRESETS = [
  { id: 20, name: "Sahih International" },
  { id: 131, name: "Dr. Mustafa Khattab (Clear Quran)" },
  { id: 19, name: "Pickthall" },
  { id: 22, name: "Yusuf Ali" },
];

function cx(...classes) {
  return classes.filter(Boolean).join(" ");
}

function useDebouncedValue(value, delay = 300) {
  const [v, setV] = useState(value);
  useEffect(() => {
    const t = setTimeout(() => setV(value), delay);
    return () => clearTimeout(t);
  }, [value, delay]);
  return v;
}

// Very small HTML tag stripper for translations returned with <sup>...</sup>
function stripHtml(html) {
  if (!html) return "";
  return html.replace(/<[^>]+>/g, "");
}

export default function QuranLiteApp() {
  const [chapters, setChapters] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [search, setSearch] = useState("");
  const debouncedSearch = useDebouncedValue(search, 200);

  const [selectedChapterId, setSelectedChapterId] = useState(1);
  const [translationId, setTranslationId] = useState(20);

  const [verses, setVerses] = useState([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const topRef = useRef(null);

  // Fetch chapters on mount
  useEffect(() => {
    (async () => {
      try {
        setError("");
        const res = await fetch(
          `https://api.quran.com/api/v4/chapters?language=en`
        );
        if (!res.ok) throw new Error(`Chapters HTTP ${res.status}`);
        const data = await res.json();
        setChapters(data.chapters || []);
      } catch (e) {
        setError(
          "Couldn't load chapters. If you're running this in a sandbox without network or with CORS restrictions, try running locally (Vite/Next)."
        );
      }
    })();
  }, []);

  // Filter chapters by search
  useEffect(() => {
    const q = debouncedSearch.trim().toLowerCase();
    if (!q) {
      setFiltered(chapters);
    } else {
      setFiltered(
        chapters.filter((c) => {
          const en = (c.translated_name?.name || c.name_simple || "").toLowerCase();
          const ar = (c.name_arabic || "").toLowerCase();
          const num = String(c.id);
          return en.includes(q) || ar.includes(q) || num === q;
        })
      );
    }
  }, [chapters, debouncedSearch]);

  // Load verses whenever chapter or translation changes
  useEffect(() => {
    if (!selectedChapterId) return;
    setVerses([]);
    setPage(1);
    setHasMore(true);
  }, [selectedChapterId, translationId]);

  useEffect(() => {
    if (!hasMore || loading) return;
    (async () => {
      try {
        setLoading(true);
        setError("");
        const url = new URL(
          `https://api.quran.com/api/v4/verses/by_chapter/${selectedChapterId}`
        );
        url.searchParams.set("language", "en");
        url.searchParams.set("translations", String(translationId));
        url.searchParams.set("fields", "text_uthmani");
        url.searchParams.set("per_page", "50");
        url.searchParams.set("page", String(page));

        const res = await fetch(url.toString());
        if (!res.ok) throw new Error(`Verses HTTP ${res.status}`);
        const data = await res.json();
        const newVerses = data.verses || [];
        setVerses((prev) => [...prev, ...newVerses]);

        // pagination meta
        const meta = data?.pagination || {};
        if (meta.next_page) {
          setHasMore(true);
        } else {
          setHasMore(false);
        }
      } catch (e) {
        setError(
          "Couldn't load verses. This can happen if network access is blocked or CORS prevents requests. Try running locally."
        );
        setHasMore(false);
      } finally {
        setLoading(false);
      }
    })();
  }, [page, selectedChapterId, translationId]);

  const selectedChapter = useMemo(
    () => chapters.find((c) => c.id === Number(selectedChapterId)),
    [chapters, selectedChapterId]
  );

  function handleSelectChapter(id) {
    setSelectedChapterId(Number(id));
    if (topRef.current) topRef.current.scrollIntoView({ behavior: "smooth" });
  }

  function handleLoadMore() {
    if (hasMore && !loading) setPage((p) => p + 1);
  }

  return (
    <div className="min-h-screen bg-neutral-50 text-neutral-900">
      {/* Top bar */}
      <header ref={topRef} className="sticky top-0 z-30 backdrop-blur bg-white/70 border-b border-neutral-200">
        <div className="mx-auto max-w-7xl px-4 py-3 flex items-center gap-3">
          <div className="shrink-0 w-10 h-10 rounded-2xl bg-neutral-900 text-white flex items-center justify-center font-bold">Q</div>
          <div className="flex-1">
            <h1 className="text-lg sm:text-xl font-semibold tracking-tight">Qur'an Lite</h1>
            <p className="text-xs text-neutral-500">Read Arabic + translation. Click a surah to start.</p>
          </div>
          {/* Translation picker */}
          <label className="text-sm mr-2" htmlFor="transPicker">Translation</label>
          <select
            id="transPicker"
            className="border border-neutral-300 rounded-xl px-3 py-2 text-sm bg-white"
            value={translationId}
            onChange={(e) => setTranslationId(Number(e.target.value))}
          >
            {TRANSLATION_PRESETS.map((t) => (
              <option key={t.id} value={t.id}>
                {t.name}
              </option>
            ))}
          </select>
        </div>
      </header>

      <main className="mx-auto max-w-7xl px-4 py-6 grid grid-cols-1 lg:grid-cols-12 gap-6">
        {/* Sidebar */}
        <aside className="lg:col-span-4 xl:col-span-3">
          <div className="rounded-2xl border border-neutral-200 bg-white p-3 shadow-sm">
            <div className="flex items-center gap-2 mb-3">
              <input
                type="text"
                placeholder="Search surah (name/#)"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="w-full border border-neutral-300 rounded-xl px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-neutral-400"
              />
            </div>
            <div className="h-[55vh] overflow-auto pr-1">
              {filtered.length === 0 && (
                <p className="text-sm text-neutral-500 px-2">No matches.</p>
              )}
              <ul className="space-y-1">
                {filtered.map((c) => (
                  <li key={c.id}>
                    <button
                      onClick={() => handleSelectChapter(c.id)}
                      className={cx(
                        "w-full text-left px-3 py-2 rounded-xl transition",
                        c.id === Number(selectedChapterId)
                          ? "bg-neutral-900 text-white"
                          : "hover:bg-neutral-100"
                      )}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-sm font-medium">{c.id}. {c.name_simple}</div>
                          <div className="text-[11px] text-neutral-500">{c.translated_name?.name}</div>
                        </div>
                        <div className="font-arabic text-right text-lg">{c.name_arabic}</div>
                      </div>
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </aside>

        {/* Reader */}
        <section className="lg:col-span-8 xl:col-span-9">
          <div className="rounded-2xl border border-neutral-200 bg-white shadow-sm">
            {/* Chapter header */}
            <div className="px-5 py-4 border-b border-neutral-200">
              {selectedChapter ? (
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="text-xl font-semibold tracking-tight">{selectedChapter.id}. {selectedChapter.name_simple}</h2>
                    <p className="text-xs text-neutral-500">{selectedChapter.translated_name?.name} • {selectedChapter.revelation_place?.toUpperCase?.() || ""} • {selectedChapter.verses_count} verses</p>
                  </div>
                  <div className="font-arabic text-2xl">{selectedChapter.name_arabic}</div>
                </div>
              ) : (
                <div className="h-6 bg-neutral-100 rounded w-48" />
              )}
            </div>

            {/* Verses list */}
            <div className="divide-y divide-neutral-100">
              {verses.map((v) => (
                <article key={v.id} className="px-5 py-4">
                  <div className="flex items-start gap-3">
                    <div className="shrink-0 w-8 h-8 rounded-full bg-neutral-900 text-white text-xs flex items-center justify-center">
                      {v.verse_number}
                    </div>
                    <div className="flex-1">
                      <p dir="rtl" className="font-arabic text-2xl leading-[2.1]">{v.text_uthmani || v.text_uthmani_simple || v.text_indopak || v.text_imlaei}</p>
                      {/* Some translations come as array */}
                      {Array.isArray(v.translations) ? (
                        v.translations.map((t) => (
                          <p key={t.id} className="mt-2 text-[15px] leading-7 text-neutral-800">
                            {stripHtml(t.text)}
                          </p>
                        ))
                      ) : v.translation ? (
                        <p className="mt-2 text-[15px] leading-7 text-neutral-800">{stripHtml(v.translation?.text)}</p>
                      ) : null}
                      <div className="mt-2 text-[11px] text-neutral-500">{v.verse_key}</div>
                    </div>
                  </div>
                </article>
              ))}

              {/* Load more / states */}
              <div className="px-5 py-6 flex items-center justify-center">
                {error ? (
                  <div className="text-sm text-red-600 text-center max-w-prose">
                    {error}
                  </div>
                ) : loading ? (
                  <button disabled className="px-4 py-2 rounded-xl border border-neutral-300 bg-neutral-100 text-sm">Loading…</button>
                ) : hasMore ? (
                  <button
                    onClick={handleLoadMore}
                    className="px-4 py-2 rounded-xl border border-neutral-300 hover:bg-neutral-50 text-sm"
                  >
                    Load more
                  </button>
                ) : (
                  <div className="text-xs text-neutral-500">End of chapter</div>
                )}
              </div>
            </div>
          </div>
        </section>
      </main>

      {/* Footer */}
      <footer className="mx-auto max-w-7xl px-4 pb-10 text-center text-[11px] text-neutral-500">
        Sources: Quran.com API. Arabic Uthmani text and English translations are provided by their respective resources.
      </footer>

      {/* Minimal Arabic font utility */}
      <style>{`
        .font-arabic { font-family: ui-serif, Georgia, "Amiri", "Scheherazade New", serif; }
      `}</style>
    </div>
  );
}
